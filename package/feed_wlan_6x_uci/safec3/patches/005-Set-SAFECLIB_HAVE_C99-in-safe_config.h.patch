From c9587356cca1d36e9069aa8144ff7489dd44de44 Mon Sep 17 00:00:00 2001
From: Hauke Mehrtens <hauke.mehrtens@intel.com>
Date: Mon, 11 Nov 2019 14:00:26 +0100
Subject: Set SAFECLIB_HAVE_C99 in safe_config.h

The SAFECLIB_HAVE_C99 preprocessor check is used in public header
and local C files. When an application uses the header files the
SAFECLIB_HAVE_C99 option has to be set to the same option used
when compiling the safeclib. Add this to the configure command.

Without this patch the safeclib was compiled with SAFECLIB_HAVE_C99
and exported the symbol _sprintf_s_chk, but my application used the
header and did not manually set SAFECLIB_HAVE_C99 and then used the
sprintf_s symbol, which is not exported by the shared safeclib.

Signed-off-by: Hauke Mehrtens <hauke.mehrtens@intel.com>
---
 configure.ac             | 3 +++
 include/safe_config.h.in | 5 +++++
 2 files changed, 8 insertions(+)

--- a/configure.ac
+++ b/configure.ac
@@ -385,6 +385,7 @@ AC_PROG_CC_C11
 if test "x$ac_cv_prog_cc_c99" = "xno"; then
    dnl we really should ERROR, lets see how far can come without
    AC_MSG_WARN([This compiler ${CC} has no c99 support])
+   INSERT_SAFECLIB_HAVE_C99="#undef SAFECLIB_HAVE_C99"
 else
    AC_DEFINE([SAFECLIB_HAVE_C99], 1,
         [Defined to 1 when the compiler supports c99, mostly (...) macros])
@@ -392,9 +393,11 @@ else
       AC_MSG_RESULT([added $ac_cv_prog_cc_c99 to CFLAGS])
       AM_CFLAGS="$AM_CFLAGS $ac_cv_prog_cc_c99"
    fi
+   INSERT_SAFECLIB_HAVE_C99="#define SAFECLIB_HAVE_C99 1"
 fi
 dnl AM_CONDITIONAL([SAFECLIB_HAVE_C99], [test "x$ac_cv_prog_cc_c99=no" != "xno"])
 AC_SUBST(SAFECLIB_HAVE_C99)
+AC_SUBST(INSERT_SAFECLIB_HAVE_C99)
 
 if test "x$ac_cv_prog_cc_c11" != "xno"; then
    AC_DEFINE([HAVE_C11], 1,
--- a/include/safe_config.h.in
+++ b/include/safe_config.h.in
@@ -122,6 +122,11 @@ extern "C" {
 @INSERT_ERROR_DMAX@
 
 /*
+ * Set if libsafec3 was compiled with C99 support.
+ */
+@INSERT_SAFECLIB_HAVE_C99@
+
+/*
  * The spec does not call out a maximum len for the strtok src
  * string (the max delims size), so one is defined here.
  */
