From 4150e722dd45892e90170e9f217400f758a2849b Mon Sep 17 00:00:00 2001
From: Reini Urban <rurban@cpan.org>
Date: Fri, 24 May 2019 11:16:38 +0200
Subject: [PATCH 02/10] fix strnlen_s and wcsnlen_s

Fixes #65
---
 include/safe_str_lib.h |  6 +++---
 src/safeclib_private.h | 16 +++++-----------
 src/str/strnlen_s.c    | 25 ++++++++++++++-----------
 src/wchar/wcsnlen_s.c  | 37 ++++++++++++++++++++-----------------
 tests/test_strnlen_s.c | 16 ++++++++--------
 tests/test_wcsnlen_s.c |  6 +++---
 6 files changed, 53 insertions(+), 53 deletions(-)

--- a/include/safe_str_lib.h
+++ b/include/safe_str_lib.h
@@ -133,8 +133,8 @@ _strncpy_s_chk(char * restrict dest, rsi
 
 /* string length */
 EXTERN rsize_t
-_strnlen_s_chk (const char* str, rsize_t smax, const size_t strbos)
-    BOS_CHK2(str, smax);
+_strnlen_s_chk (const char* str, rsize_t smax, size_t strbos)
+    BOS_OVR2_BUTNULL(str, smax);
 #define strnlen_s(str,smax) _strnlen_s_chk(str,smax,BOS(str))
 
 /* string tokenizer */
@@ -666,7 +666,7 @@ _wctomb_s_chk(int *restrict retvalp, cha
     _wctomb_s_chk(retvalp,dest,dmax,wc,BOS(dest))
 
 EXTERN size_t
-_wcsnlen_s_chk(const wchar_t *dest, size_t dmax, const size_t destbos)
+_wcsnlen_s_chk(const wchar_t *dest, size_t dmax, size_t destbos)
     BOSW_CHK(dest);
 #define wcsnlen_s(dest,dmax)            \
     _wcsnlen_s_chk(dest,dmax,BOS(dest))
--- a/src/safeclib_private.h
+++ b/src/safeclib_private.h
@@ -222,18 +222,12 @@ typedef unsigned long uintptr_t;
 #  define GCC_DIAG_RESTORE
 #endif
 
-#ifdef DEBUG
-#  if defined(HAVE_C99) && defined(__KERNEL__)
-#    define debug_printf(...)  printk(KERN_DEBUG __VA_ARGS__)
-#  else
-#    define debug_printf printf
-#  endif
+#if defined(DEBUG) && defined(HAVE_C99) && defined(__KERNEL__)
+#  define debug_printf(...)  printk(KERN_DEBUG __VA_ARGS__)
+#elif defined(HAVE_C99)
+#  define debug_printf(...) fprintf(STDERR, __VA_ARGS__)
 #else
-# ifdef HAVE_C99
-#   define debug_printf(...)
-# else
-#   define debug_printf printf
-# endif
+#  define debug_printf printf
 #endif
 
 /* TODO: do we need the builtin's? rather just use __bnd... which is defined on CHKP and MPX.
--- a/src/str/strnlen_s.c
+++ b/src/str/strnlen_s.c
@@ -2,8 +2,10 @@
  * strnlen_s.c
  *
  * October 2008, Bo Berry
+ * May 2019, Reini Urban
  *
  * Copyright (c) 2008-2011 by Cisco Systems, Inc
+ * Copyright (c) 2019 by Reini Urban
  * All rights reserved.
  *
  * Permission is hereby granted, free of charge, to any person
@@ -67,7 +69,7 @@
  *
  */
 EXPORT rsize_t
-_strnlen_s_chk (const char *str, rsize_t smax, const size_t strbos)
+_strnlen_s_chk (const char *str, rsize_t smax, size_t strbos)
 {
     rsize_t count;
 
@@ -82,20 +84,15 @@ _strnlen_s_chk (const char *str, rsize_t
                    (void*)str, ESZEROL);
         return 0;
     }
+    if (unlikely(smax > RSIZE_MAX_STR)) {
+        invoke_safe_str_constraint_handler("strnlen_s: smax exceeds max",
+                                           (void*)str, ESLEMAX);
+        return 0;
+    }
     if (strbos == BOS_UNKNOWN) {
-        if (unlikely(smax > RSIZE_MAX_STR)) {
-            invoke_safe_str_constraint_handler("strnlen_s: smax exceeds max",
-                       (void*)str, ESLEMAX);
-            return 0;
-        }
         BND_CHK_PTR_BOUNDS(str, smax);
     } else {
         if (unlikely(smax != strbos)) {
-            if (unlikely(smax > strbos)) {
-                invoke_safe_str_constraint_handler("strnlen_s: smax exceeds str",
-                           (void*)str, EOVERFLOW);
-                return 0;
-            }
 #ifdef HAVE_WARN_DMAX
             handle_str_src_bos_chk_warn("strnlen_s", (char*)str,
                                         smax, strbos, "str", "smax");
@@ -111,6 +108,12 @@ _strnlen_s_chk (const char *str, rsize_t
         count++;
         smax--;
         str++;
+        /* Dont touch past strbos */
+        if (strbos != BOS_UNKNOWN) {
+            strbos--;
+            if (unlikely(!strbos))
+                return count;
+        }
     }
 
     return count;
--- a/src/wchar/wcsnlen_s.c
+++ b/src/wchar/wcsnlen_s.c
@@ -2,8 +2,9 @@
  * wcsnlen_s.c
  *
  * September 2017, Reini Urban
+ * May 2019, Reini Urban
  *
- * Copyright (c) 2017 by Reini Urban
+ * Copyright (c) 2017,2019 by Reini Urban
  * All rights reserved.
  *
  * Permission is hereby granted, free of charge, to any person
@@ -74,7 +75,7 @@
  */
 
 EXPORT rsize_t
-_wcsnlen_s_chk (const wchar_t *dest, rsize_t dmax, const size_t destbos)
+_wcsnlen_s_chk (const wchar_t *dest, rsize_t dmax, size_t destbos)
 {
     const wchar_t *z;
     rsize_t orig_dmax = dmax;
@@ -87,23 +88,16 @@ _wcsnlen_s_chk (const wchar_t *dest, rsi
                    (void*)dest, ESZEROL);
         return RCNEGATE(0);
     }
+    if (unlikely(dmax > RSIZE_MAX_WSTR)) {
+        invoke_safe_str_constraint_handler("wcsnlen_s: dmax exceeds max",
+                   (void*)dest, ESLEMAX);
+        return RCNEGATE(0);
+    }
     if (destbos == BOS_UNKNOWN) {
-        if (unlikely(dmax > RSIZE_MAX_WSTR)) {
-            invoke_safe_str_constraint_handler("wcsnlen_s: dmax exceeds max",
-                       (void*)dest, ESLEMAX);
-            return RCNEGATE(0);
-        }
         BND_CHK_PTR_BOUNDS(dest, dmax * sizeof(wchar_t));
     } else {
-        /* string literals also have the ending \0 */
-        size_t destsz = dmax * sizeof(wchar_t);
-        if (unlikely(destsz > destbos)) {
-            invoke_safe_str_constraint_handler("wcsnlen_s: dmax exceeds dest",
-                       (void*)dest, EOVERFLOW);
-            return RCNEGATE(0);
-        }
 #ifdef HAVE_WARN_DMAX
-        if (unlikely(destsz != destbos)) {
+        if (unlikely(dmax*sizeof(wchar_t) != destbos)) {
             handle_str_bos_chk_warn("wcsnlen_s",(char*)dest,dmax,
                                     destbos/sizeof(wchar_t));
             RETURN_ESLEWRNG;
@@ -116,8 +110,17 @@ _wcsnlen_s_chk (const wchar_t *dest, rsi
     if (z) dmax = z - dest;
     return dmax;
 #else
-    for (z = dest; dmax && *dest != 0; dmax--, dest++)
-        ;
+    if (destbos != BOS_UNKNOWN) {
+        /* Dont touch past destbos */
+        for (z = dest; dmax && *dest != 0; dmax--, dest++) {
+            destbos -= sizeof(wchar_t);
+            if (unlikely(destbos <= 0))
+                return dmax ? (rsize_t)(dest - z) : orig_dmax;
+        }
+    } else {
+        for (z = dest; dmax && *dest != 0; dmax--, dest++)
+            ;
+    }
     return dmax ? (rsize_t)(dest - z) : orig_dmax;
 #endif
 }
--- a/tests/test_strnlen_s.c
+++ b/tests/test_strnlen_s.c
@@ -51,7 +51,7 @@ int test_strnlen_s (void)
     max_len = RSIZE_MAX_STR+1;
     len = strnlen_s("test", max_len);
     if (len != 0) {
-        debug_printf("%s %u   Len=%u \n",
+        debug_printf("%s %u   len=%u \n",
                      __FUNCTION__, __LINE__,  (unsigned)len);
         errs++;
     }
@@ -101,7 +101,7 @@ int test_strnlen_s (void)
     len = strnlen_s ("testing", max_len);
 
     if (std_len != len) {
-        debug_printf("%s %u   std_len=%u  len=%u  \n",
+        debug_printf("%s %u   std_len=%u  len=%u\n",
                      __FUNCTION__, __LINE__,  (unsigned)std_len, (unsigned)len);
         errs++;
     }
@@ -111,7 +111,7 @@ int test_strnlen_s (void)
     len = strnlen_s ("testing", max_len);
 
     if (len != max_len) {
-        debug_printf("%s %u   len=%u  \n",
+        debug_printf("%s %u   len=%u <> 1\n",
                __FUNCTION__, __LINE__, (unsigned)len);
         errs++;
     }
@@ -121,7 +121,7 @@ int test_strnlen_s (void)
     len = strnlen_s ("testing", max_len);
 
     if (len != max_len) {
-        debug_printf("%s %u   len=%u  \n",
+        debug_printf("%s %u   len=%u  <> 2\n",
                      __FUNCTION__, __LINE__, (unsigned)len);
         errs++;
     }
@@ -131,12 +131,41 @@ int test_strnlen_s (void)
     len = strnlen_s ("testing", max_len);
 
     if (len != max_len) {
-        debug_printf("%s %u   len=%u  \n",
+        debug_printf("%s %u   len=%u <> 3\n",
                      __FUNCTION__, __LINE__, (unsigned)len);
         errs++;
     }
 /*--------------------------------------------------*/
 
+    max_len = 7;
+    len = strnlen_s ("testing", max_len);
+
+    if (len != 7) {
+        debug_printf("%s %u   len=%u <> 7\n",
+                     __FUNCTION__, __LINE__, (unsigned)len);
+        errs++;
+    }
+/*--------------------------------------------------*/
+
+    max_len = 8;
+    len = strnlen_s ("testing", max_len);
+
+    if (len != 7) {
+        debug_printf("%s %u   len=%u <> 7\n",
+                     __FUNCTION__, __LINE__, (unsigned)len);
+        errs++;
+    }
+/*--------------------------------------------------*/
+
+    max_len = 9;
+    len = strnlen_s ("testing", max_len);
+
+    if (len != 7) {
+        debug_printf("%s %u   len=%u <> 7\n",
+                     __FUNCTION__, __LINE__, (unsigned)len);
+        errs++;
+    }
+/*--------------------------------------------------*/
     return (errs);
 }
 
--- a/tests/test_wcsnlen_s.c
+++ b/tests/test_wcsnlen_s.c
@@ -52,7 +52,7 @@ int test_wcsnlen_s (void)
     wcscpy(str1, L"test");
     EXPECT_BOS("dest overflow")
     len = wcsnlen_s(str1, LEN+1);
-    EXPLEN(0)
+    EXPLEN(4)
 # endif
 
     wcscpy(str1, L"test");
@@ -77,7 +77,7 @@ int test_wcsnlen_s (void)
     /* PS: compile-time check once fixed by adding const'ness and all warnings */
     EXPECT_BOS_TODO("dest overflow")
     len = wcsnlen_s(L"test", 6);
-    EXPLEN(0)
+    EXPLEN(4)
 # endif
 
 #endif
@@ -108,7 +108,7 @@ int test_wcsnlen_s (void)
     wcscpy(str1, L"t");
     max_len = LEN;
 
-    len = wcsnlen_s (str1, max_len); /* static string would overflow */
+    len = wcsnlen_s (str1, max_len);
     STDLEN()
 
     len = wcsnlen_s (L"t", 1); /* static string */
